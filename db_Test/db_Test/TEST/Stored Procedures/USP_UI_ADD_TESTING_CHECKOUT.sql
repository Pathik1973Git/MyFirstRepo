

CREATE PROCEDURE [TEST].[USP_UI_ADD_TESTING_CHECKOUT]
	@CREATED_BY varchar(50),
	@CHECK_OUT_DESC VARCHAR(200),
	@RTN INT = Null OUTPUT

AS

	SET NOCOUNT ON

	DECLARE @CHECK_OUT_DTE DATETIME = GETDATE()
	DECLARE @X AS INT


	BEGIN TRY
		BEGIN
			SET @X = (SELECT COUNT(1) AS CNT FROM TEST.TESTING_CHECKLOUT WHERE IS_CLOSED_IND IS NULL OR IS_CLOSED_IND = 0)

			IF @X <> 0
				BEGIN
					RAISERROR ('You can not check out testing until the previous checkout is closed, please check in first' ,16, 1)
				END

			INSERT INTO TEST.TESTING_CHECKLOUT(CHECK_OUT_DTE, CHECK_OUT_BY, CHECK_OUT_DESC, CREATED_DTE, CREATED_BY) 
						VALUES(@CHECK_OUT_DTE, @CREATED_BY, @CHECK_OUT_DESC, @CHECK_OUT_DTE, @CREATED_BY)
		
			SET @RTN = 1
			RETURN @RTN --Positive Return
		END
	END TRY
	BEGIN CATCH
		 DECLARE @ProcName AS NVARCHAR(128) = ISNULL(ERROR_PROCEDURE(), 'UNKNOWN');
		 DECLARE @ER_PLAT as VARCHAR(128) = 'MSSQL DB ENGINE'
		 DECLARE @ER_NBR AS INTEGER = ISNULL(ERROR_NUMBER(),0)
		 DECLARE @ER_LINE AS INTEGER = ISNULL(ERROR_LINE(),0)
		 DECLARE @ER_SEV AS INTEGER = ISNULL(ERROR_SEVERITY(),0)
		 DECLARE @ER_ST AS INTEGER = ISNULL(ERROR_STATE(),0)
		 DECLARE @ER_MSG AS NVARCHAR(4000) = ISNULL(ERROR_MESSAGE(), 'A MESSAGE WAS NOT PROVIDED');
		 DECLARE @ER_USR AS VARCHAR(255) = ISNULL(CURRENT_USER, 'UNKONWN')

		 EXECUTE @RTN =  AM.USP_ERR_LOG @ProcName, @ER_PLAT, @ER_NBR, @ER_LINE, @ER_SEV, @ER_ST,@ER_MSG, @ER_USR	
		 RETURN @RTN --Returns LOG_ID From [AM].[PROCEDURE_ERROR_LOG]  as a negitive integer
	END CATCH;






