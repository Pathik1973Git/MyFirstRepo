

CREATE PROCEDURE [TEST].[USP_UI_CLEAN_STATUS]
	@RTN INT = Null OUTPUT
AS

	SET NOCOUNT ON

	DECLARE @LOAD_ID INT

	--DECLARE @LOADID INTEGER 
	DECLARE @BATCH_DTE DATE = CAST(GETDATE() as DATE)
	DECLARE @LAST_UPDT_DTE DATETIME = GETDATE()
	DECLARE @LAST_UPDT_BY VARCHAR(50) = SYSTEM_USER	
	
	DECLARE @USER_COMPUTER_NME VARCHAR(50)= @@SERVERNAME 
	DECLARE @USER_OSUSER VARCHAR(50) = @LAST_UPDT_BY 

	BEGIN TRY
		BEGIN

			SELECT @LOAD_ID = NEXT VALUE FOR AM.SEQ_LOAD_ID 

			--THIS WILL SET EVERYTHING MANAUL OR BATCH RUNABLE TO A COMPLETE STATUS, NO EXECUTION, COUTNER TO MAX, AND NEXT RUN TO NOW
			--MARKS ALL ARTIFACTS AS IF THEY RAN SUCCESSFULLY SO THE MINI BATCH CAN BE INITIALZIED IN THE NEXT STEPS


			UPDATE ACM
				SET 			
					 LAST_STATUS_CODE_VALUE_ID = 2							-- Successful
					,NEXT_PROCESS_TYPE_VALUE_ID = 64						-- Non-Actionable
					,ART_BATCH_RETRY_COUNTER = ART_BATCH_RETRY_THRESHOLD	-- to make sure there is no way a manual exectuion druing this time wil be rerun
					,NEXT_PROCESS_DATE_TIME = GETDATE()						-- Set date time to Now
					, LAST_UPDT_DTE = @LAST_UPDT_DTE
					, LAST_UPDT_BY = @LAST_UPDT_BY   
				FROM
					AM.ARTIFACT_CTRL_MASTER ACM		   
				where IS_ENABLED_IND = 1
					and SCHEDULE_MODE_VALUE_ID IN(51,52)					-- Audit or Execution Mode

			--INSERT NEW RECORD IN CONTROL DETAIL TABLE WITH INITIALIZATION RECORD
			INSERT INTO AM.ARTIFACT_CTRL_DETAIL 
				(
				ART_CTRL_MASTER_ID, LOAD_ID, ART_NME, ART_PROCESS_DESC, ART_GROUP_VALUE_ID, 
				ART_BATCH_RETRY_COUNTER, ART_BATCH_RETRY_THRESHOLD, CREATED_DTE,
				BATCH_DTE, START_TIME, STATUS_CODE_VALUE_ID, LOAD_MESSAGE, USER_OSUSER
				)
			SELECT 
				ART_CTRL_MASTER_ID, @LOAD_ID, ART_NME, ACM.ART_PROCESS_DESC,ART_GROUP_VALUE_ID,
				ART_BATCH_RETRY_COUNTER, ART_BATCH_RETRY_THRESHOLD, @LAST_UPDT_DTE,
				@BATCH_DTE, @LAST_UPDT_DTE, 2, 'TESTING SET TO COMPLETE', @LAST_UPDT_BY
			FROM
				AM.ARTIFACT_CTRL_MASTER ACM		
			WHERE IS_ENABLED_IND = 1
				and SCHEDULE_MODE_VALUE_ID IN(51,52) --batch
			
			SET @RTN = 1
			RETURN @RTN --Positive Return
		END
	END TRY

	BEGIN CATCH
		 DECLARE @ProcName AS NVARCHAR(128) = ISNULL(ERROR_PROCEDURE(), 'UNKNOWN');
		 DECLARE @ER_PLAT as VARCHAR(128) = 'MSSQL DB ENGINE'
		 DECLARE @ER_NBR AS INTEGER = ISNULL(ERROR_NUMBER(),0)
		 DECLARE @ER_LINE AS INTEGER = ISNULL(ERROR_LINE(),0)
		 DECLARE @ER_SEV AS INTEGER = ISNULL(ERROR_SEVERITY(),0)
		 DECLARE @ER_ST AS INTEGER = ISNULL(ERROR_STATE(),0)
		 DECLARE @ER_MSG AS NVARCHAR(4000) = ISNULL(ERROR_MESSAGE(), 'A MESSAGE WAS NOT PROVIDED');
		 DECLARE @ER_USR AS VARCHAR(255) = ISNULL(CURRENT_USER, 'UNKONWN')

		 EXECUTE @RTN =  AM.USP_ERR_LOG @ProcName, @ER_PLAT, @ER_NBR, @ER_LINE, @ER_SEV, @ER_ST,@ER_MSG, @ER_USR	
		 RETURN @RTN --Returns LOG_ID From [AM].[PROCEDURE_ERROR_LOG]  as a negitive integer
	END CATCH;





