


CREATE PROCEDURE [AM].[USP_DBA_MANUAL_EXEC] 
	@ART_CTRL_MASTER_ID INT,
	@SCHEDULE_MODE_VALUE_ID Int, 
	@RTN INT = Null OUTPUT

AS
	BEGIN TRY
		
		SET NOCOUNT ON

		DECLARE @ART_TYPE_VALUE_ID INT = (SELECT ART_TYPE_VALUE_ID FROM [AM].[ARTIFACT_CTRL_MASTER] ACM WHERE ACM.ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID)

		--Check to see if the package is running   	   
		If 1 <> (SELECT [LAST_STATUS_CODE_VALUE_ID] 
				FROM [AM].[ARTIFACT_CTRL_MASTER] ACM 
				WHERE ACM.ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID
					  AND @ART_TYPE_VALUE_ID in(21,23))
			BEGIN
				DECLARE @LOAD_ID INT = NEXT VALUE FOR AM.SEQ_LOAD_ID
				DECLARE @BATCH_DTE DATE = CAST(GETUTCDATE() AS DATE)
				DECLARE @ART_GROUP_VALUE_ID tinyint
				DECLARE @ART_NME varchar(100)
				DECLARE @ART_PROCESS_DESC varchar(1000)
				DECLARE @ART_BATCH_RETRY_COUNTER TinyInt
				DECLARE @ART_BATCH_RETRY_THRESHOLD TinyInt
				DECLARE @START_TIME DATETIME = GETUTCDATE()
				DECLARE @LOAD_MESSAGE VarChar (200) = 'Manually Executed'
				DECLARE @EXEC_ID INT
					
					
			--************************************************************************************************************************************************************
			--**** EXECUTE PACKAGE ***************************************************************************************************************************************
			--************************************************************************************************************************************************************
				EXEC @EXEC_ID = [AM].[USP_QM_EXECUTE_PACKAGE] @ART_CTRL_MASTER_ID
			--************************************************************************************************************************************************************
					
					
					UPDATE AM.ARTIFACT_CTRL_MASTER 
					SET 
					LAST_LOAD_ID = @LOAD_ID,
					ART_BATCH_RETRY_COUNTER = ART_BATCH_RETRY_THRESHOLD -1,  -- NO RETRIES - Will not show up in queue
					LAST_BATCH_DTE = @BATCH_DTE,
					LAST_PROCESS_DTE = GETDATE(),
					LAST_STATUS_CODE_VALUE_ID = 1,
					LAST_START_TIME = GETDATE(),
					LAST_END_TIME = NULL,
					LAST_MESSAGE =@LOAD_MESSAGE,
					NEXT_PROCESS_TYPE_VALUE_ID = @SCHEDULE_MODE_VALUE_ID,
					NEXT_PROCESS_DATE_TIME = GETDATE()
					WHERE ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID
		
					
			SELECT @ART_NME = ART_NME, 	@ART_GROUP_VALUE_ID = ART_GROUP_VALUE_ID, @ART_PROCESS_DESC = ART_PROCESS_DESC,
				   @ART_BATCH_RETRY_COUNTER = ART_BATCH_RETRY_COUNTER, @ART_BATCH_RETRY_THRESHOLD = ART_BATCH_RETRY_THRESHOLD, @LOAD_ID = LAST_LOAD_ID, @BATCH_DTE = LAST_BATCH_DTE
				   FROM [AM].[ARTIFACT_CTRL_MASTER]
				   WHERE ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID	

			INSERT INTO  AM.ARTIFACT_CTRL_DETAIL
				(
				ART_CTRL_MASTER_ID, ART_NME, LOAD_ID, STATUS_CODE_VALUE_ID, ART_GROUP_VALUE_ID,
				ART_PROCESS_DESC, BATCH_DTE, ART_BATCH_RETRY_COUNTER, ART_BATCH_RETRY_THRESHOLD, START_TIME,LOAD_MESSAGE, USER_OSUSER, CREATED_DTE
				)
 
			Values
				(
				@ART_CTRL_MASTER_ID, @ART_NME, @LOAD_ID, 1, @ART_GROUP_VALUE_ID, 
				@ART_PROCESS_DESC, @BATCH_DTE, @ART_BATCH_RETRY_COUNTER, @ART_BATCH_RETRY_THRESHOLD, @Start_Time, @LOAD_MESSAGE, SYSTEM_USER, GETUTCDATE()			
				)

		END
		Select @EXEC_ID as EXEC_ID
		EXEC [AM].[USP_QM_UPDATE_STATUS_SSISDB_MAPPING]
		RETURN @RTN
	END  TRY
	
	BEGIN CATCH
	Begin
		 DECLARE @ProcName AS NVARCHAR(128) = ISNULL(ERROR_PROCEDURE(), 'UNKNOWN');
		 DECLARE @ER_PLAT as VARCHAR(128) = 'MSSQL DB ENGINE'
		 DECLARE @ER_NBR AS INTEGER = ISNULL(ERROR_NUMBER(),0)
		 DECLARE @ER_LINE AS INTEGER = ISNULL(ERROR_LINE(),0)
		 DECLARE @ER_SEV AS INTEGER = ISNULL(ERROR_SEVERITY(),0)
		 DECLARE @ER_ST AS INTEGER = ISNULL(ERROR_STATE(),0)
		 DECLARE @ER_MSG AS NVARCHAR(4000) = ISNULL(ERROR_MESSAGE(), 'A MESSAGE WAS NOT PROVIDED');
		 DECLARE @ER_USR AS VARCHAR(255) = ISNULL(CURRENT_USER, 'UNKONWN')

		 EXECUTE @RTN =  AM.USP_ERR_LOG @ProcName, @ER_PLAT, @ER_NBR, @ER_LINE, @ER_SEV, @ER_ST,@ER_MSG, @ER_USR	
		 --RETURN @RTN --Returns LOG_ID From [AM].[PROCEDURE_ERROR_LOG]  as a negitive integer
	END
	
	RETURN @RTN

END CATCH;



