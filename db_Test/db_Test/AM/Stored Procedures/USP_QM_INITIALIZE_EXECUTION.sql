
CREATE PROCEDURE [AM].[USP_QM_INITIALIZE_EXECUTION]
	@RUN_MODE INT,				-- REQUIRED - Mode the package was exectued
	@ART_CTRL_MASTER_ID INT,	-- REQURIED - From ACM
	@RTN INT = Null OUTPUT		-- OPTIONAL - Do not send this is a return
	
AS

SET NOCOUNT ON

BEGIN TRY
	DECLARE @LOAD_ID INTEGER
	DECLARE @EXEC_ID INT = NULL
	DECLARE @BATCH_DTE DATE
	DECLARE @ART_GROUP_VALUE_ID tinyint
	DECLARE @ART_NME varchar(100)
	DECLARE @ART_PROCESS_DESC varchar(1000)
	DECLARE @ART_BATCH_RETRY_COUNTER TinyInt
	DECLARE @ART_BATCH_RETRY_THRESHOLD TinyInt
	DECLARE @START_TIME DATETIME = GETDATE()
	DECLARE @LOAD_MESSAGE VarChar (200) = 'Package Execution Started - '
	DECLARE @SCHEDULE_TYPE_VALUE_ID INT
	
	-- SET LOAD MESSAGE
	-- IF called in audit mode EXEC_ID doesn't apply because the package isn't getting executed - Set to -1
	
	SELECT  @LOAD_MESSAGE = 
		Case @RUN_MODE
			WHEN 52 Then CONCAT(@LOAD_MESSAGE, 'EXECUTION MODE')
			WHEN 51 Then CONCAT(@LOAD_MESSAGE, 'AUDIT MODE')
			WHEN 53 Then CONCAT(@LOAD_MESSAGE, 'Manual MODE')
			ELSE CONCAT(@LOAD_MESSAGE, 'OTHER MODE')
		END

	If @RUN_MODE = 51
		Begin
			SET @EXEC_ID = -1
		END
   
	-- Variables as Requried 
	-- NOTE: BATCH_DTE and SCHEDULE_TYPE_VALUE_ID are coming from CTRL MSTR These are set during initializaiton USP_INITIALIZE_BATCH
	SELECT @ART_NME = ART_NME, 	@ART_GROUP_VALUE_ID = ART_GROUP_VALUE_ID, @ART_PROCESS_DESC = ART_PROCESS_DESC, @SCHEDULE_TYPE_VALUE_ID = SCHEDULE_TYPE_VALUE_ID,
		@ART_BATCH_RETRY_COUNTER = ART_BATCH_RETRY_COUNTER, @ART_BATCH_RETRY_THRESHOLD = ART_BATCH_RETRY_THRESHOLD, @LOAD_ID = LAST_LOAD_ID, @BATCH_DTE = LAST_BATCH_DTE
	FROM [AM].[ARTIFACT_CTRL_MASTER]
	WHERE ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID	

	-- Update ARTIFACT_CTRL_MASTER
	-- NOTE: Some of these fields are refreshed USP_PKG_ON_EXECUTE called via SSIS package On Pre Execute envent handler
	--	     Sometimes the pre - execute event hanlder won't fire due to code issues ex. Connection Error.  This update is a stop gap in case Pre Execute doesn't fire.  
	UPDATE AM.ARTIFACT_CTRL_MASTER
		SET 
		ART_BATCH_RETRY_COUNTER = ART_BATCH_RETRY_COUNTER + 1,  --Happens here and not in USP_PKG_ON_EXECUTE by design
		LAST_BATCH_DTE = @BATCH_DTE,
		LAST_PROCESS_DTE = GETDATE(),
		LAST_STATUS_CODE_VALUE_ID = 1,
		LAST_START_TIME =  GETDATE(),
		LAST_END_TIME = NULL,
		LAST_MESSAGE = @LOAD_MESSAGE,
		LAST_EXEC_ID = @EXEC_ID,									-- Nulls prior Exec ID for SCHED TYPE EXEC MODE, and sets Exec ID to -1 if AUDIT MODE
		IS_STATUS_VALIDATED = 0
		WHERE ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID

	-- NOTE: A Detail Record isn't created this  will happen in the Pre Execute call to USP_PKG_ON_EXECUTE
	--		 Open risk is this may missed on Pre Execute failer, impact is very low. 

	Select @RTN = 1
	RETURN @RTN

END TRY

BEGIN CATCH
	Begin
		 DECLARE @ProcName AS NVARCHAR(128) = ISNULL(ERROR_PROCEDURE(), 'UNKNOWN');
		 DECLARE @ER_PLAT as VARCHAR(128) = 'MSSQL DB ENGINE'
		 DECLARE @ER_NBR AS INTEGER = ISNULL(ERROR_NUMBER(),0)
		 DECLARE @ER_LINE AS INTEGER = ISNULL(ERROR_LINE(),0)
		 DECLARE @ER_SEV AS INTEGER = ISNULL(ERROR_SEVERITY(),0)
		 DECLARE @ER_ST AS INTEGER = ISNULL(ERROR_STATE(),0)
		 DECLARE @ER_MSG AS NVARCHAR(4000) = ISNULL(ERROR_MESSAGE(), 'A MESSAGE WAS NOT PROVIDED');
		 DECLARE @ER_USR AS VARCHAR(255) = ISNULL(CURRENT_USER, 'UNKONWN')

		 EXECUTE @RTN =  AM.USP_ERR_LOG @ProcName, @ER_PLAT, @ER_NBR, @ER_LINE, @ER_SEV, @ER_ST,@ER_MSG, @ER_USR	
	
	END

	--RETURN @RTN --Returns LOG_ID From [AM].[PROCEDURE_ERROR_LOG]  as a negitive integer
	RETURN @RTN

END CATCH;









