CREATE PROCEDURE [AM].[USP_UI_CHANGE_ARTIFACT]
	@ART_ID INTEGER,								--<=Required
	@ART_TYPE_VALUE_ID INTEGER  = NULL,             --<=Optional
	@ART_NME VARCHAR(100)  = NULL,					--<=Optional
	@ART_CTRL_MASTER_ID INTEGER = NULL,				--<=Optional
	@ART_SHORT_DESC VARCHAR(200) = NULL,			--<=Optional
	@ART_BUSINESS_DESC VARCHAR(500)= NULL,			--<=Optional
	@DEVELOPER_COMMENTS VARCHAR(500)= NULL,			--<=Optional
	@RTN AS INT = NULL OUTPUT
	
AS
	
	SET NOCOUNT ON
	
	BEGIN TRY
		DECLARE @LAST_UPDT_DTE DATETIME = GETDATE()
		DECLARE @LAST_UPDT_BY VARCHAR(50) = CURRENT_USER
		DECLARE @SQL_STR NVARCHAR(4000)
		DECLARE @PARMDEF NVARCHAR(1000)
		DECLARE @x INTEGER
			

	
		SET @x = 0
		SET @SQL_STR = N'UPDATE AM.ARTIFACT SET '

		IF @ART_TYPE_VALUE_ID IS NOT NULL 
			BEGIN
				SET @SQL_STR = @SQL_STR + N'ART_TYPE_VALUE_ID = @ART_TYPE_VALUE_ID, ' 
				SET @X = @X + 1  
			END 


		IF @ART_NME IS NOT NULL 
			BEGIN 
				SET @SQL_STR = @SQL_STR + N'ART_NME = @ART_NME, ' 
				SET @X = @X + 1 
			END 
		
		IF @ART_CTRL_MASTER_ID IS NOT NULL 
			BEGIN 
				SET @SQL_STR = @SQL_STR + N'ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID, ' 
				SET @X = @X + 1 
			END 


		IF @ART_SHORT_DESC IS NOT NULL 
			BEGIN 
				SET @SQL_STR = @SQL_STR + N'ART_SHORT_DESC = @ART_SHORT_DESC, ' 
				SET @X = @X + 1 
			END 
		
		IF @ART_BUSINESS_DESC IS NOT NULL 
			BEGIN 
				SET @SQL_STR = @SQL_STR + N'ART_BUSINESS_DESC = @ART_BUSINESS_DESC, ' 
				SET @X = @X + 1 
			END 

		IF @DEVELOPER_COMMENTS IS NOT NULL 
			BEGIN 
				SET @SQL_STR = @SQL_STR + N'DEVELOPER_COMMENTS = @DEVELOPER_COMMENTS, ' 
				SET @X = @X + 1 
				END 

		If @X = 0
			BEGIN 
				--Raise Error
				RAISERROR ('You must update at least one field',16,1)
			END

		SET @SQL_STR = @SQL_STR + N'LAST_UPDT_DTE = @LAST_UPDT_DTE, '
		SET @SQL_STR = @SQL_STR + N'LAST_UPDT_BY = @LAST_UPDT_BY '
		SET @SQL_STR = @SQL_STR + N'WHERE ART_ID = @ART_ID'
				
		SET @PARMDEF = N'@ART_TYPE_VALUE_ID INTEGER, @ART_NME VARCHAR(100), @ART_CTRL_MASTER_ID INTEGER, @ART_SHORT_DESC VARCHAR(200), 
						@ART_BUSINESS_DESC VARCHAR(500), @DEVELOPER_COMMENTS VARCHAR(500), @LAST_UPDT_DTE DATETIME, 
						@LAST_UPDT_BY VARCHAR(50), @ART_ID INTEGER'

		Execute  sp_executesql @SQL_STR, @PARMDEF, 
				@ART_TYPE_VALUE_ID = @ART_TYPE_VALUE_ID, 
				@ART_NME = @ART_NME,
				@ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID,
				@ART_SHORT_DESC = @ART_SHORT_DESC,
				@ART_BUSINESS_DESC = @ART_BUSINESS_DESC,
				@DEVELOPER_COMMENTS = @DEVELOPER_COMMENTS,
				@LAST_UPDT_DTE = @LAST_UPDT_DTE,
				@LAST_UPDT_BY = @LAST_UPDT_BY,
				@ART_ID = @ART_ID

		SET @RTN = 1
		RETURN @RTN --Positive Return
	END TRY
	
	BEGIN CATCH
		 DECLARE @ProcName AS NVARCHAR(128) = ISNULL(ERROR_PROCEDURE(), 'UNKNOWN');
		 DECLARE @ER_PLAT as VARCHAR(128) = 'MSSQL DB ENGINE'
		 DECLARE @ER_NBR AS INTEGER = ISNULL(ERROR_NUMBER(),0)
		 DECLARE @ER_LINE AS INTEGER = ISNULL(ERROR_LINE(),0)
		 DECLARE @ER_SEV AS INTEGER = ISNULL(ERROR_SEVERITY(),0)
		 DECLARE @ER_ST AS INTEGER = ISNULL(ERROR_STATE(),0)
		 DECLARE @ER_MSG AS NVARCHAR(4000) = ISNULL(ERROR_MESSAGE(), 'A MESSAGE WAS NOT PROVIDED');
		 DECLARE @ER_USR AS VARCHAR(255) = ISNULL(CURRENT_USER, 'UNKONWN')

		 EXECUTE @RTN =  AM.USP_ERR_LOG @ProcName, @ER_PLAT, @ER_NBR, @ER_LINE, @ER_SEV, @ER_ST,@ER_MSG, @ER_USR	
		 RETURN @RTN --Returns LOG_ID From [AM].[PROCEDURE_ERROR_LOG]  as a negitive integer
		 Rollback
	END CATCH;






