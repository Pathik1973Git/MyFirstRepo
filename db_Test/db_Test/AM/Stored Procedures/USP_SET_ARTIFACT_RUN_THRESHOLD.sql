


-- =============================================
-- Author:		Shreyas Bhagat
-- Create date: 06/27/2017
-- Description:	This Store procedure sets the artifact alert thresholds and resets 'Sent' alert columns to '0'
-- =============================================


CREATE PROCEDURE [AM].[USP_SET_ARTIFACT_RUN_THRESHOLD]	
	
	@RTN INT = Null OUTPUT									--<=Optional - No need to send defaults to 0 and then returns message based on success

AS
	
	SET NOCOUNT ON	
	
	BEGIN TRY

		--DECLARE @BATCH_DTE AS DATE
		--SET @BATCH_DTE= (SELECT BATCH_DTE FROM AM.ARTIFACT_BATCH_SCHEDULE (NOLOCK))

		SELECT * INTO #Temp_Override_Alert FROM [AM].[ARTIFACT_LONG_RUN_ALERT] (NOLOCK) WHERE [OVERRIDE_ALERT]=1-- To persist Override artifact details

		TRUNCATE TABLE [AM].[ARTIFACT_LONG_RUN_ALERT]

		INSERT INTO [AM].[ARTIFACT_LONG_RUN_ALERT]
				   (ART_CTRL_MASTER_ID
				   ,[INFO_LVL]
				   ,[WARN_LVL]
				   ,[CRIT_LVL]
				   ,[INFO_SENT]
				   ,[WARN_SENT]
				   ,[CRIT_SENT]
				   --,[BATCH_DTE]
				   ,[OVERRIDE_ALERT]
				   ,[OVERRIDE_LVL]
				   ,[CREATED_DTE]
				   ,[LST_UPD_DTE])     
		SELECT AT.ART_CTRL_MASTER_ID, 
		AB.ALERT_INFO_THRESHOLD INFO_LVL,
		AB.ALERT_WARN_THRESHOLD WARN_LVL,
		AB.ALERT_CRITICAL_THRESHOLD CRIT_LVL,
		0 AS INFO_SENT,0 WARN_SENT, 0 AS CRIT_SENT,
		--@BATCH_DTE AS BATCH_DTE,
		0,0, GETDATE() CREATED_DTE, NULL AS LST_UPD_DTE
		FROM AM.ARTIFACT_CTRL_MASTER (NOLOCK) AT --JOIN AM.ARTIFACT_CTRL_MASTER (NOLOCK) ACM
		--ON AT.ART_ID=ACM.ART_ID
		JOIN [AM].[ARTIFACT_QUEUE_RUNTIME] (NOLOCK) AQ ON AT.ART_CTRL_MASTER_ID=AQ.ART_CTRL_MASTER_ID
		OUTER APPLY 
		(SELECT TOP 1 ALERT_INFO_THRESHOLD,ALERT_WARN_THRESHOLD,ALERT_CRITICAL_THRESHOLD
		 FROM [AM].[ARTIFACT_RUN_THRESHOLD] (NOLOCK) WHERE AQ.AVG_QUEUE_RUNTIME_SECONDS_30_Day BETWEEN FROM_RUN_TIME AND TO_RUN_TIME) AB
		WHERE --ACM.BATCH_CYCLE IN (121,122)-- Consider only 2 PM and 9 PM batch artifacts.
		IS_ENABLED_IND=1
		UPDATE LR
		SET LR.[OVERRIDE_ALERT]=OA.[OVERRIDE_ALERT]
		,LR.[OVERRIDE_LVL]=OA.[OVERRIDE_LVL]		
		FROM [AM].[ARTIFACT_LONG_RUN_ALERT] (NOLOCK) LR JOIN 
		#Temp_Override_Alert OA ON LR.ART_CTRL_MASTER_ID=OA.ART_CTRL_MASTER_ID

			SET @RTN = 1
			RETURN @RTN --Positive Return	

	END TRY
	
	BEGIN CATCH
		 DECLARE @ProcName AS NVARCHAR(128) = ISNULL(ERROR_PROCEDURE(), 'UNKNOWN');
		 DECLARE @ER_NBR AS INTEGER = ISNULL(ERROR_NUMBER(),0)
		 DECLARE @ER_LINE AS INTEGER = ISNULL(ERROR_LINE(),0)
		 DECLARE @ER_SEV AS INTEGER = ISNULL(ERROR_SEVERITY(),0)
		 DECLARE @ER_ST AS INTEGER = ISNULL(ERROR_STATE(),0)
		 DECLARE @ER_MSG AS NVARCHAR(4000) = ISNULL(ERROR_MESSAGE(), 'A MESSAGE WAS NOT PROVIDED');
		 DECLARE @ER_USR AS VARCHAR(255) = ISNULL(CURRENT_USER, 'UNKONWN')

		 
		 --EXECUTE @RTN =  AM.ERR_LOG @ProcName,'',@ER_NBR, @ER_LINE, @ER_SEV, @ER_ST,@ER_MSG, @ER_USR	
		 --RETURN @RTN --Returns LOG_ID From [AM].[PROCEDURE_ERROR_LOG]  as a negitive integer
		
	END CATCH;





