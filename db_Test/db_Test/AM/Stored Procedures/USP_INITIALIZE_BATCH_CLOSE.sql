CREATE PROCEDURE [AM].[USP_INITIALIZE_BATCH_CLOSE]
	@RTN INT = Null OUTPUT

AS
SET NOCOUNT ON
BEGIN TRY
	BEGIN
		-- REMOVE TEMP TABLE IF EXISTS
		IF OBJECT_ID(N'tempdb..#BATCH_CLOSE', N'U') IS NOT NULL 
			BEGIN  
				DROP TABLE #BATCH_CLOSE; 
			END
		
		 Select Cast(C.SCHEDULE_TYPE_VALUE_ID as INT) as 'SCHEDULE_TYPE_VALUE_ID'
		 INTO #BATCH_CLOSE
		  From 
			(
				Select LAST_STATUS_CODE_VALUE_ID, SCHEDULE_TYPE_VALUE_ID
				FROM AM.ARTIFACT_CTRL_MASTER
				Group BY LAST_STATUS_CODE_VALUE_ID, SCHEDULE_TYPE_VALUE_ID
			) as C
		  Join AM.BATCH_CTRL_MASTER B
			On B.SCHEDULE_TYPE_VALUE_ID = C.SCHEDULE_TYPE_VALUE_ID
		  Where B.END_DTE IS NULL
		  Group By C.SCHEDULE_TYPE_VALUE_ID
		  Having Count(C.SCHEDULE_TYPE_VALUE_ID) = 1 and Avg(C.LAST_STATUS_CODE_VALUE_ID) = 2

		  DECLARE @CurSch INT = 0
		  --Sets last batch to successful, BATCH_CTRL_MASTER LAST_STATUS_CODE_VALUE_ID = 2 = Successfull, also updates BATCH_CTRL_DETIAL with completed record. 
		  WHILE (SELECT COUNT(1) FROM #BATCH_CLOSE) > 0 
			BEGIN 
				SET @CurSch = (SELECT TOP 1 SCHEDULE_TYPE_VALUE_ID FROM #BATCH_CLOSE)
				EXEC AM.USP_INITIALIZE_BATCH_UPDATE 2, @CurSch, NULL  
				DELETE FROM #BATCH_CLOSE WHERE SCHEDULE_TYPE_VALUE_ID = @CurSch  
			END 
		SET @RTN = 1
		RETURN @RTN
	END
END TRY

BEGIN CATCH
	BEGIN
		 DECLARE @ProcName AS NVARCHAR(128) = ISNULL(ERROR_PROCEDURE(), 'UNKNOWN');
		 DECLARE @ER_PLAT as VARCHAR(128) = 'MSSQL DB ENGINE'
		 DECLARE @ER_NBR AS INTEGER = ISNULL(ERROR_NUMBER(),0)
		 DECLARE @ER_LINE AS INTEGER = ISNULL(ERROR_LINE(),0)
		 DECLARE @ER_SEV AS INTEGER = ISNULL(ERROR_SEVERITY(),0)
		 DECLARE @ER_ST AS INTEGER = ISNULL(ERROR_STATE(),0)
		 DECLARE @ER_MSG AS NVARCHAR(4000) = ISNULL(ERROR_MESSAGE(), 'A MESSAGE WAS NOT PROVIDED');
		 DECLARE @ER_USR AS VARCHAR(255) = ISNULL(CURRENT_USER, 'UNKONWN')

		 EXECUTE @RTN =  AM.USP_ERR_LOG @ProcName, @ER_PLAT, @ER_NBR, @ER_LINE, @ER_SEV, @ER_ST,@ER_MSG, @ER_USR	
		 --RETURN @RTN --Returns LOG_ID From [AM].[PROCEDURE_ERROR_LOG]  as a negitive integer
	END
	RETURN @RTN
END CATCH;
