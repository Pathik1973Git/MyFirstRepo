
CREATE Procedure [AM].[USP_ADD_ARTIFACTS_FROM_CTRL_MASTER] 
	@RTN INT = Null OUTPUT
	AS

	BEGIN TRY

		INSERT INTO AM.ARTIFACT

		SELECT ACM.ART_CTRL_MASTER_ID, ACM.ART_TYPE_VALUE_ID, ACM.ART_NME, 
		ACM.ART_PROCESS_DESC as 'ART_SHORT_DESC', NULL as 'ART_BUSINESS_DESC', NULL as 'DEVELOPER_COMMENTS', 
		1 as 'IS_ACTIVE_IND', GETDATE() as 'CREATED_DTE',SYSTEM_USER as  'CREATED_BY', ACM.LAST_UPDT_DTE, ACM.LAST_UPDT_BY, NULL as 'LAST_CHG_LOAD_ID'
		FROM AM.ARTIFACT_CTRL_MASTER ACM
		LEFT JOIN AM.ARTIFACT A
			ON ACM.ART_CTRL_MASTER_ID = A.ART_CTRL_MASTER_ID
		WHERE A.ART_CTRL_MASTER_ID Is Null
		
		Select @RTN = 1
		RETURN @RTN

	END TRY

	BEGIN CATCH
		Begin
			 DECLARE @ProcName AS NVARCHAR(128) = ISNULL(ERROR_PROCEDURE(), 'UNKNOWN');
			 DECLARE @ER_PLAT as VARCHAR(128) = 'MSSQL DB ENGINE'
			 DECLARE @ER_NBR AS INTEGER = ISNULL(ERROR_NUMBER(),0)
			 DECLARE @ER_LINE AS INTEGER = ISNULL(ERROR_LINE(),0)
			 DECLARE @ER_SEV AS INTEGER = ISNULL(ERROR_SEVERITY(),0)
			 DECLARE @ER_ST AS INTEGER = ISNULL(ERROR_STATE(),0)
			 DECLARE @ER_MSG AS NVARCHAR(4000) = ISNULL(ERROR_MESSAGE(), 'A MESSAGE WAS NOT PROVIDED');
			 DECLARE @ER_USR AS VARCHAR(255) = ISNULL(CURRENT_USER, 'UNKONWN')

			 EXECUTE @RTN =  AM.USP_ERR_LOG @ProcName, @ER_PLAT, @ER_NBR, @ER_LINE, @ER_SEV, @ER_ST,@ER_MSG, @ER_USR	
		END
	    --RETURN @RTN --Returns LOG_ID From [AM].[PROCEDURE_ERROR_LOG]  as a negitive integer
		RETURN @RTN

	END CATCH;
