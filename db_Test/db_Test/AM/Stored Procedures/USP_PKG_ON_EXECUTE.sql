
CREATE PROCEDURE [AM].[USP_PKG_ON_EXECUTE]
	@ART_CTRL_MASTER_ID INT,					-- REQUIRED	- From ACM
	@EXEC_ID as Int,							-- REQUIRED - From ACM - Updated previously by USP_INITIALIZE_EXECUTION
	@SOURCE_NME as VarChar (100) = NULL,		-- OPTIONAL - Source name the package uses
	@TARGET_NME as Varchar(100) = NULL,			-- OPTIONAL	- Target Name the package uses
	@START_TIME as varchar(200),					-- Load Start time
	@END_TIME as varchar(200),						-- Load End time
	@IS_INCREMENTAL as bit,
	@RTN INT = Null OUTPUT						-- OPTIONAL - Do not send this is a return

AS

BEGIN TRY
	DECLARE @LOAD_ID INTEGER
	DECLARE @BATCH_DTE DATE
	DECLARE @ART_GROUP_VALUE_ID tinyint
	DECLARE @ART_NME varchar(100)
	DECLARE @ART_PROCESS_DESC varchar(1000)
	DECLARE @ART_BATCH_RETRY_COUNTER TinyInt
	DECLARE @ART_BATCH_RETRY_THRESHOLD TinyInt
	DECLARE @PKG_START_TIME DATETIME = GETDATE()
	DECLARE @LOAD_MESSAGE VarChar (200) = 'Package Execution Running - EXEC MODE'
	DECLARE @SCHEDULE_TYPE_VALUE_ID INT
	
	-- Set Varibles as reqruied
	SELECT @ART_NME = ART_NME, 	@ART_GROUP_VALUE_ID = ART_GROUP_VALUE_ID, @ART_PROCESS_DESC = ART_PROCESS_DESC, @SCHEDULE_TYPE_VALUE_ID = SCHEDULE_TYPE_VALUE_ID,
		@ART_BATCH_RETRY_COUNTER = ART_BATCH_RETRY_COUNTER, @ART_BATCH_RETRY_THRESHOLD = ART_BATCH_RETRY_THRESHOLD, @LOAD_ID = LAST_LOAD_ID, @BATCH_DTE = LAST_BATCH_DTE
	FROM [AM].[ARTIFACT_CTRL_MASTER]
	WHERE ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID	

	-- Sets the source and Target names if it is not passed to the procedure, avoids overwriting valid names
	IF @SOURCE_NME is null
		BEGIN
			SET @SOURCE_NME = (SELECT CM.LAST_SOURCE_NME FROM AM.ARTIFACT_CTRL_MASTER CM WHERE CM.ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID)
		END
	IF @TARGET_NME is null
		BEGIN
			SET @TARGET_NME = (SELECT CM.LOAD_TARGET_NME FROM AM.ARTIFACT_CTRL_MASTER CM WHERE CM.ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID)
		END

	-- UPDATE CTRL MASTER
	-- NOTE: Do not incriment BACH_RETRY_COUNTER this happens only in USP_INITIALIZE_EXECUTION
	--       which is called during the execution process via USP_EXEC_QUEUE_MSTR --> USP_INITIALIZE_EXECUTION
	UPDATE AM.ARTIFACT_CTRL_MASTER
		SET 
		LAST_EXEC_ID = @EXEC_ID,
		LAST_BATCH_DTE = @BATCH_DTE,
		LAST_PROCESS_DTE = @PKG_START_TIME,
		LAST_STATUS_CODE_VALUE_ID = 1,
		LAST_START_TIME = @PKG_START_TIME,
		LAST_MESSAGE = @LOAD_MESSAGE,
		LAST_SOURCE_NME = @SOURCE_NME,
		LOAD_TARGET_NME = @TARGET_NME,
		IS_STATUS_VALIDATED = 0,
		LOAD_START_VALUE = @START_TIME,
		LOAD_END_VALUE = @END_TIME,
		IS_INCREMENTAL_LOAD =  @IS_INCREMENTAL
	WHERE ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID

	-- Inserts a record into AM.ARTIFACT_CTRL_DETIAL
	INSERT INTO  AM.ARTIFACT_CTRL_DETAIL
		(
		ART_CTRL_MASTER_ID, ART_NME, EXEC_ID, LOAD_ID, STATUS_CODE_VALUE_ID, ART_GROUP_VALUE_ID,
		ART_PROCESS_DESC, BATCH_DTE, ART_BATCH_RETRY_COUNTER, ART_BATCH_RETRY_THRESHOLD, START_TIME,
		LOAD_MESSAGE, USER_OSUSER, CREATED_DTE, IS_INCREMENTAL_LOAD, LOAD_START_VALUE,LOAD_END_VALUE
		) 
	 Values
		(
		@ART_CTRL_MASTER_ID, @ART_NME, @EXEC_ID, @LOAD_ID, 1, @ART_GROUP_VALUE_ID, 
		@ART_PROCESS_DESC, @BATCH_DTE, @ART_BATCH_RETRY_COUNTER, @ART_BATCH_RETRY_THRESHOLD, @PKG_START_TIME, 
		@LOAD_MESSAGE, SYSTEM_USER, GETDATE(), 	@IS_INCREMENTAL, @START_TIME, @END_TIME
		)

	-- Posivtive integer equals success 
	-- Returns Load ID for to the calling SSIS pacakge 
	Select @RTN = @LOAD_ID 
	RETURN @RTN

END TRY

BEGIN CATCH
	Begin
		 DECLARE @ProcName AS NVARCHAR(128) = ISNULL(ERROR_PROCEDURE(), 'UNKNOWN');
		 DECLARE @ER_PLAT as VARCHAR(128) = 'MSSQL DB ENGINE'
		 DECLARE @ER_NBR AS INTEGER = ISNULL(ERROR_NUMBER(),0)
		 DECLARE @ER_LINE AS INTEGER = ISNULL(ERROR_LINE(),0)
		 DECLARE @ER_SEV AS INTEGER = ISNULL(ERROR_SEVERITY(),0)
		 DECLARE @ER_ST AS INTEGER = ISNULL(ERROR_STATE(),0)
		 DECLARE @ER_MSG AS NVARCHAR(4000) = ISNULL(ERROR_MESSAGE(), 'A MESSAGE WAS NOT PROVIDED');
		 DECLARE @ER_USR AS VARCHAR(255) = ISNULL(CURRENT_USER, 'UNKONWN')

		 EXECUTE @RTN =  AM.USP_ERR_LOG @ProcName, @ER_PLAT, @ER_NBR, @ER_LINE, @ER_SEV, @ER_ST,@ER_MSG, @ER_USR	
	
	END

	--RETURN @RTN --Returns LOG_ID From [AM].[PROCEDURE_ERROR_LOG]  as a negitive integer
	RETURN @RTN

END CATCH;









