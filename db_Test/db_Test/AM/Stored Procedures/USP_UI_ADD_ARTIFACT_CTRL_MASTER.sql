


CREATE PROCEDURE [AM].[USP_UI_ADD_ARTIFACT_CTRL_MASTER]
	@ART_NME VARCHAR(100) = NULL,						--<=Required		
	@ART_TYPE_VALUE_ID TINYINT,							--<=Required
	@ART_GROUP_VALUE_ID TINYINT,						--<=Required				
	@ART_LAYER_VALUE_ID TINYINT,						--<=Required
	@SCHEDULE_TYPE_VALUE_ID TINYINT,					--<=Required
	@SCHEDULE_MODE_VALUE_ID TINYINT,					--<=Required
	@SOURCE_SYSTEM_VALUE_ID TINYINT = NULL,				--<=Optional	
	@ART_PROCESS_DESC VARCHAR(1000) = NULL,				--<=Optional
	@SCHEDULE_RUN_TIME TIME(0)	= NULL,					--<=Optional
	@ART_BATCH_RETRY_THRESHOLD INT = 3,					--<=Optional
	@ART_SCALE_VALUE INT = 0,							--<=Optional
	@LOAD_TARGET_NME VARCHAR(100) = NULL,				--<=Optional
	@LAST_SOURCE_NME VARCHAR(100) = NULL,				--<=Optional
	@RTN INT = Null OUTPUT								--<=Optional - No need to send defaults to 0 and then returns message based on success

AS

	SET NOCOUNT ON

	DECLARE @CREATED_DTE DATETIME = GETDATE()
	DECLARE @IS_ENABLED AS BIT = 'True'
	DECLARE @CREATED_BY VARCHAR(50) = SYSTEM_USER

	BEGIN TRY --[ART_BATCH_EXECUTION_PRIORITY_VALUE_ID][ART_SCALE_VALUE_ID][PROCESS_TYPE_VALUE_ID][ART_BATCH_RETRY_THRESHOLD][BATCH_CYCLE]
		

		
		
		INSERT INTO AM.ARTIFACT_CTRL_MASTER (
						ART_NME, ART_TYPE_VALUE_ID, ART_GROUP_VALUE_ID, ART_LAYER_VALUE_ID, 
						SCHEDULE_TYPE_VALUE_ID, SCHEDULE_MODE_VALUE_ID, SOURCE_SYSTEM_VALUE_ID, ART_PROCESS_DESC, 
						SCHEDULE_RUN_TIME, ART_BATCH_RETRY_THRESHOLD, ART_SCALE_VALUE, LOAD_TARGET_NME, LAST_SOURCE_NME,
						CREATED_DTE, CREATED_BY, IS_ENABLED_IND)
						 
					VALUES(
						@ART_NME, @ART_TYPE_VALUE_ID, @ART_GROUP_VALUE_ID, @ART_LAYER_VALUE_ID, 
						@SCHEDULE_TYPE_VALUE_ID, @SCHEDULE_MODE_VALUE_ID, @SOURCE_SYSTEM_VALUE_ID, @ART_PROCESS_DESC, 
						@SCHEDULE_RUN_TIME, @ART_BATCH_RETRY_THRESHOLD, @ART_SCALE_VALUE, @LOAD_TARGET_NME, @LAST_SOURCE_NME,
						@CREATED_DTE, @CREATED_BY, @IS_ENABLED)

		SET @RTN = 1
		RETURN @RTN --Positive Return

	END TRY
	BEGIN CATCH
		 DECLARE @ProcName AS NVARCHAR(128) = ISNULL(ERROR_PROCEDURE(), 'UNKNOWN');
		 DECLARE @ER_PLAT as VARCHAR(128) = 'MSSQL DB ENGINE'
		 DECLARE @ER_NBR AS INTEGER = ISNULL(ERROR_NUMBER(),0)
		 DECLARE @ER_LINE AS INTEGER = ISNULL(ERROR_LINE(),0)
		 DECLARE @ER_SEV AS INTEGER = ISNULL(ERROR_SEVERITY(),0)
		 DECLARE @ER_ST AS INTEGER = ISNULL(ERROR_STATE(),0)
		 DECLARE @ER_MSG AS NVARCHAR(4000) = ISNULL(ERROR_MESSAGE(), 'A MESSAGE WAS NOT PROVIDED');
		 DECLARE @ER_USR AS VARCHAR(255) = ISNULL(CURRENT_USER, 'UNKONWN')

		 EXECUTE @RTN =  AM.USP_ERR_LOG @ProcName, @ER_PLAT, @ER_NBR, @ER_LINE, @ER_SEV, @ER_ST,@ER_MSG, @ER_USR	
		 RETURN @RTN --Returns LOG_ID From [AM].[PROCEDURE_ERROR_LOG]  as a negitive integer
	END CATCH;






