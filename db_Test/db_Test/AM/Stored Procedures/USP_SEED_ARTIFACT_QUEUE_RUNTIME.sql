
CREATE PROCEDURE [AM].[USP_SEED_ARTIFACT_QUEUE_RUNTIME]
		@RTN INT = Null OUTPUT								--<=Optional - No need to send defaults to 0 and then returns message based on success
AS

	
	SET NOCOUNT ON	

	
	DELETE FROM AM.ARTIFACT_QUEUE_RUNTIME

	BEGIN TRY
		BEGIN
			With CTE_RUNTIME AS
			(
			Select A.ART_CTRL_MASTER_ID, A.LOAD_ID, A.START_TIME,  B.END_TIME as 'END_TIME', A.BATCH_DTE, DATEDIFF(SECOND, A.START_TIME, B.END_TIME) AS 'RUN_TIME',Datediff(DAY,a.BATCH_DTE, cast(getdate() as Date))  as 'AGE'
			FROM AM.ARTIFACT_CTRL_DETAIL A 
				Inner Join AM.ARTIFACT_CTRL_DETAIL B ON
					A.ART_CTRL_MASTER_ID = B. ART_CTRL_MASTER_ID and A.LOAD_ID = B.LOAD_ID and A.BATCH_DTE = B.BATCH_DTE
				INNER JOIN AM.ARTIFACT_CTRL_MASTER CM ON
				A.ART_CTRL_MASTER_ID = CM.ART_CTRL_MASTER_ID
			where A.STATUS_CODE_VALUE_ID = 1 
				AND B.STATUS_CODE_VALUE_ID = 2 
				AND CM.SCHEDULE_MODE_VALUE_ID = 52
				--AND B.LOAD_MESSAGE <> 'Package Execution Completed - EXEC MODE '
				AND Datediff(DAY,a.BATCH_DTE, cast(getdate() as Date)) < 90

			)

			, CTE_AVG_QUEUE as 
			(
			Select ART_CTRL_MASTER_ID, AVG(RUN_TIME) as 'Avg_QueueRuntime_Seconds_90_Day',
			(SELECT AVG(RUN_TIME) FROM CTE_RUNTIME where ART_CTRL_MASTER_ID=CT.ART_CTRL_MASTER_ID AND  RUN_TIME IS NOT NULL and START_TIME between GETDATE()-60 and GETDATE() ) as 'Avg_QueueRuntime_Seconds_60_Day',
			(SELECT AVG(RUN_TIME) FROM CTE_RUNTIME where ART_CTRL_MASTER_ID=CT.ART_CTRL_MASTER_ID AND  RUN_TIME IS NOT NULL and START_TIME between GETDATE()-30 and GETDATE() ) as 'Avg_QueueRuntime_Seconds_30_Day',
			(SELECT AVG(RUN_TIME) FROM CTE_RUNTIME where ART_CTRL_MASTER_ID=CT.ART_CTRL_MASTER_ID AND  RUN_TIME IS NOT NULL and START_TIME between GETDATE()-7 and GETDATE() ) as 'Avg_QueueRuntime_Seconds_7_Day'
			
			From CTE_RUNTIME CT
			WHERE RUN_TIME IS NOT NULL
			Group BY ART_CTRL_MASTER_ID
			)

			INSERT INTO AM.ARTIFACT_QUEUE_RUNTIME
				SELECT ART_CTRL_MASTER_ID, ISNULL(Avg_QueueRuntime_Seconds_7_Day,0), ISNULL(Avg_QueueRuntime_Seconds_30_Day,0)
				,ISNULL(Avg_QueueRuntime_Seconds_60_Day,0)
				,ISNULL(Avg_QueueRuntime_Seconds_90_Day,0),0, GETDATE(), 0
				FROM CTE_AVG_QUEUE
			SET @RTN = 1
			RETURN @RTN --Positive Return
	
		END

	END TRY
	BEGIN CATCH
		 DECLARE @ProcName AS NVARCHAR(128) = ISNULL(ERROR_PROCEDURE(), 'UNKNOWN');
		 DECLARE @ER_NBR AS INTEGER = ISNULL(ERROR_NUMBER(),0)
		 DECLARE @ER_LINE AS INTEGER = ISNULL(ERROR_LINE(),0)
		 DECLARE @ER_SEV AS INTEGER = ISNULL(ERROR_SEVERITY(),0)
		 DECLARE @ER_ST AS INTEGER = ISNULL(ERROR_STATE(),0)
		 DECLARE @ER_MSG AS NVARCHAR(4000) = ISNULL(ERROR_MESSAGE(), 'A MESSAGE WAS NOT PROVIDED');
		 DECLARE @ER_USR AS VARCHAR(255) = ISNULL(CURRENT_USER, 'UNKONWN')

		 SELECT 'ERROR '
		-- EXECUTE @RTN =  AM.ERR_LOG @ProcName,'',@ER_NBR, @ER_LINE, @ER_SEV, @ER_ST,@ER_MSG, @ER_USR	
		 RETURN @RTN --Returns LOG_ID From [AM].[PROCEDURE_ERROR_LOG]  as a negitive integer
		 Rollback
	END CATCH;





