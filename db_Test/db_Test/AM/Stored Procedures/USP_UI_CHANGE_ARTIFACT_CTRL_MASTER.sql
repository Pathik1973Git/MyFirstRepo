
CREATE PROCEDURE [AM].[USP_UI_CHANGE_ARTIFACT_CTRL_MASTER]
	@ART_CTRL_MASTER_ID INTEGER,						--<=Required
	@ART_NME VARCHAR(100) = NULL,						---<=Optional		
	@ART_TYPE_VALUE_ID TINYINT = NULL,					--<=Optional
	@ART_GROUP_VALUE_ID TINYINT = NULL,					--<=Optional				
	@ART_LAYER_VALUE_ID TINYINT = NULL,					--<=Optional
	@SCHEDULE_TYPE_VALUE_ID TINYINT = NULL,				--<=Optional
	@SCHEDULE_MODE_VALUE_ID TINYINT = NULL,				--<=Optional
	@SOURCE_SYSTEM_VALUE_ID TINYINT = NULL,				--<=Optional	
	@ART_PROCESS_DESC VARCHAR(1000) = NULL,				--<=Optional
	@SCHEDULE_RUN_TIME TIME(0)	= NULL,					--<=Optional
	@ART_BATCH_RETRY_THRESHOLD INT = NULL,				--<=Optional
	@ART_SCALE_VALUE INT = NULL,						--<=Optional
	@LOAD_TARGET_NME VARCHAR(100) = NULL,				--<=Optional
	@SOURCE_NME VARCHAR(100) = NULL,					--<=Optional
	@RTN INT = Null OUTPUT								--<=Optional - No need to send defaults to NULL and then returns message based on success

AS
	
	SET NOCOUNT ON
	
	BEGIN TRY
		DECLARE @LAST_UPDT_BY VARCHAR(50) = SYSTEM_USER
		DECLARE @LAST_UPDT_DTE DATETIME = GETDATE()
		DECLARE @SQL_STR NVARCHAR(4000)
		DECLARE @PARMDEF NVARCHAR(1000)
		DECLARE @LAST_SOURCE_NME VARCHAR(100) = @SOURCE_NME
		DECLARE @x INTEGER
		
		--If @ART_PROCESS_RUN_TIME = '12:00:00 AM'
		--	BEGIN
		--		SET @ART_PROCESS_RUN_TIME = NULL
		--	END 
	
		SET @X = (SELECT COUNT(ART_CTRL_MASTER_ID) FROM AM.ARTIFACT_CTRL_MASTER WHERE ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID)	
		IF @X <> 1
			BEGIN 
				RAISERROR ('No matching records found with this ART_CTRL_MASTER_ID and ART_ID' ,16, 1)
			END		
		SET @x = 0
		SET @SQL_STR = N'UPDATE AM.ARTIFACT_CTRL_MASTER SET '
		IF @ART_NME IS NOT NULL BEGIN SET @SQL_STR = @SQL_STR + N'ART_NME = @ART_NME, ' SET @X = @X  + 1 END
		IF @ART_TYPE_VALUE_ID IS NOT NULL BEGIN SET @SQL_STR = @SQL_STR + N'ART_TYPE_VALUE_ID = @ART_TYPE_VALUE_ID, ' SET @X = @X  + 1 END
		IF @ART_GROUP_VALUE_ID IS NOT NULL BEGIN SET @SQL_STR = @SQL_STR + N'ART_GROUP_VALUE_ID = @ART_GROUP_VALUE_ID, ' SET @X = @X  + 1 END
		IF @ART_LAYER_VALUE_ID IS NOT NULL BEGIN SET @SQL_STR = @SQL_STR + N'ART_LAYER_VALUE_ID = @ART_LAYER_VALUE_ID, ' SET @X = @X  + 1 END
		IF @SCHEDULE_TYPE_VALUE_ID IS NOT NULL BEGIN SET @SQL_STR = @SQL_STR + N'SCHEDULE_TYPE_VALUE_ID = @SCHEDULE_TYPE_VALUE_ID, ' SET @X = @X  + 1 END
		IF @SCHEDULE_MODE_VALUE_ID IS NOT NULL BEGIN SET @SQL_STR = @SQL_STR + N'SCHEDULE_MODE_VALUE_ID = @SCHEDULE_MODE_VALUE_ID, ' SET @X = @X  + 1 END
		IF @SOURCE_SYSTEM_VALUE_ID IS NOT NULL BEGIN SET @SQL_STR = @SQL_STR + N'SOURCE_SYSTEM_VALUE_ID = @SOURCE_SYSTEM_VALUE_ID, ' SET @X = @X  + 1 END
		IF @ART_PROCESS_DESC IS NOT NULL BEGIN SET @SQL_STR = @SQL_STR + N'ART_PROCESS_DESC = @ART_PROCESS_DESC, ' SET @X = @X  + 1 END
		IF @SCHEDULE_RUN_TIME IS NOT NULL BEGIN SET @SQL_STR = @SQL_STR + N'SCHEDULE_RUN_TIME = @SCHEDULE_RUN_TIME, ' SET @X = @X  + 1 END
		IF @ART_BATCH_RETRY_THRESHOLD IS NOT NULL BEGIN SET @SQL_STR = @SQL_STR + N'ART_BATCH_RETRY_THRESHOLD = @ART_BATCH_RETRY_THRESHOLD, ' SET @X = @X  + 1 END
		IF @ART_SCALE_VALUE IS NOT NULL BEGIN SET @SQL_STR = @SQL_STR + N'ART_SCALE_VALUE = @ART_SCALE_VALUE, ' SET @X = @X  + 1 END
		IF @LOAD_TARGET_NME IS NOT NULL BEGIN SET @SQL_STR = @SQL_STR + N'LOAD_TARGET_NME = @LOAD_TARGET_NME, ' SET @X = @X  + 1 END
		IF @LAST_SOURCE_NME IS NOT NULL BEGIN SET @SQL_STR = @SQL_STR + N'LAST_SOURCE_NME = @LAST_SOURCE_NME, ' SET @X = @X  + 1 END
		--*******************************************************************************************
		SET @SQL_STR = @SQL_STR + N'LAST_UPDT_DTE = @LAST_UPDT_DTE, '		
		SET @SQL_STR = @SQL_STR + N'LAST_UPDT_BY = @LAST_UPDT_BY '		
		SET @SQL_STR = @SQL_STR + N'WHERE ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID'
		--*******************************************************************************************

		If @X = 0
			BEGIN 
				--Raise Error
				RAISERROR ('You must update at least one field',16,1)
			END
		SET @PARMDEF =  N'
						@ART_CTRL_MASTER_ID INTEGER, 
						@ART_NME VARCHAR(100) = NULL, 
						@ART_TYPE_VALUE_ID TINYINT, 
						@ART_GROUP_VALUE_ID TINYINT, 
						@ART_LAYER_VALUE_ID TINYINT, 
						@SCHEDULE_TYPE_VALUE_ID TINYINT, 
						@SCHEDULE_MODE_VALUE_ID TINYINT, 
						@SOURCE_SYSTEM_VALUE_ID TINYINT, 
						@ART_PROCESS_DESC VARCHAR(1000), 
						@SCHEDULE_RUN_TIME TIME(0), 
						@ART_BATCH_RETRY_THRESHOLD INT, 
						@ART_SCALE_VALUE INT, 
						@LOAD_TARGET_NME VARCHAR(100), 
						@LAST_SOURCE_NME VARCHAR(100), 
						@LAST_UPDT_DTE DATETIME,
						@LAST_UPDT_BY VARCHAR(50)'
						
		Execute  sp_executesql @SQL_STR, @PARMDEF, 
						@ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID,
						@ART_NME = @ART_NME,
						@ART_TYPE_VALUE_ID = @ART_TYPE_VALUE_ID,
						@ART_GROUP_VALUE_ID = @ART_GROUP_VALUE_ID,
						@ART_LAYER_VALUE_ID = @ART_LAYER_VALUE_ID,
						@SCHEDULE_TYPE_VALUE_ID = @SCHEDULE_TYPE_VALUE_ID,
						@SCHEDULE_MODE_VALUE_ID = @SCHEDULE_MODE_VALUE_ID,
						@SOURCE_SYSTEM_VALUE_ID = @SOURCE_SYSTEM_VALUE_ID,
						@ART_PROCESS_DESC = @ART_PROCESS_DESC,
						@SCHEDULE_RUN_TIME = @SCHEDULE_RUN_TIME,
						@ART_BATCH_RETRY_THRESHOLD = @ART_BATCH_RETRY_THRESHOLD,
						@ART_SCALE_VALUE = @ART_SCALE_VALUE,
						@LOAD_TARGET_NME = @LOAD_TARGET_NME,
						@LAST_SOURCE_NME = @LAST_SOURCE_NME,
						@LAST_UPDT_DTE = @LAST_UPDT_DTE,
						@LAST_UPDT_BY = @LAST_UPDT_BY
					

		SET @RTN = 1
		RETURN @RTN --Positive Return
	END TRY
	
	BEGIN CATCH
		 DECLARE @ProcName AS NVARCHAR(128) = ISNULL(ERROR_PROCEDURE(), 'UNKNOWN');
		 DECLARE @ER_PLAT as VARCHAR(128) = 'MSSQL DB ENGINE'
		 DECLARE @ER_NBR AS INTEGER = ISNULL(ERROR_NUMBER(),0)
		 DECLARE @ER_LINE AS INTEGER = ISNULL(ERROR_LINE(),0)
		 DECLARE @ER_SEV AS INTEGER = ISNULL(ERROR_SEVERITY(),0)
		 DECLARE @ER_ST AS INTEGER = ISNULL(ERROR_STATE(),0)
		 DECLARE @ER_MSG AS NVARCHAR(4000) = ISNULL(ERROR_MESSAGE(), 'A MESSAGE WAS NOT PROVIDED');
		 DECLARE @ER_USR AS VARCHAR(255) = ISNULL(CURRENT_USER, 'UNKONWN')

		 EXECUTE @RTN =  AM.USP_ERR_LOG @ProcName, @ER_PLAT, @ER_NBR, @ER_LINE, @ER_SEV, @ER_ST,@ER_MSG, @ER_USR	
		 RETURN @RTN --Returns LOG_ID From [AM].[PROCEDURE_ERROR_LOG]  as a negitive integer
	END CATCH;






