CREATE PROCEDURE [AM].[USP_UI_ADD_ARTIFACT_PARAMETER]
	@ART_CTRL_MASTER_ID INTEGER,
	@PARM_NME VARCHAR(30),
	@PARM_VALUE_DATA_TYPE_CODE CHAR(1),
	@PARM_CHAR_VALUE VARCHAR(200) = NULL,
	@PARM_INT_VALUE INTEGER = NULL,
	@PARM_DTE_VALUE DATETIME = NULL,
	@PARM_DESC VARCHAR(200) = NULL,
	@RTN INT = NULL OUTPUT

AS
	
	SET NOCOUNT ON

	DECLARE @PARM_ID CHAR(4)
	DECLARE @IS_ENABLED_IND BIT = 1
	DECLARE @CREATED_DTE DATETIME = GETDATE()
	DECLARE @CREATED_BY VARCHAR(50) = SYSTEM_USER

	BEGIN TRY

	-- PARM_VALUE_DATA_TYPE_CODE  -- Logic for this field is as follows: 
	-- C = CHAR, I = INTEGER, D = Date 
	-- FORCES THE PARM_VALUE_DATA_TYPE_CODE AND THE CORESPONDING PARM VALUE TO MATCH - AFTER COALESCE IS CHECKED
	-- NULLS ALL VALUES THAT DON'T MATCH THE PARM_VALUE_DATA_TYPE_CODE
	IF UPPER(@PARM_VALUE_DATA_TYPE_CODE) = 'C' BEGIN SET @PARM_INT_VALUE  = NULL SET @PARM_DTE_VALUE = NULL END
	IF UPPER(@PARM_VALUE_DATA_TYPE_CODE) = 'I' BEGIN SET @PARM_CHAR_VALUE = NULL SET @PARM_DTE_VALUE = NULL END
	IF UPPER(@PARM_VALUE_DATA_TYPE_CODE) = 'D' BEGIN SET @PARM_CHAR_VALUE = NULL SET @PARM_INT_VALUE = NULL END
		
	--IF ALL ARE NULL RETURN AN ERROR
	IF COALESCE(@PARM_CHAR_VALUE, CAST(@PARM_INT_VALUE AS VARCHAR(200)), CAST(@PARM_DTE_VALUE AS VARCHAR(200))) IS NULL  -- @PARM_CHAR_VALUE = NULL AND @PARM_INT_VALUE = NULL AND @PARM_DTE_VALUE= NULL
		BEGIN 
			RAISERROR ('Either your code value does not match your parmater type value, or you passed NULL to all three parmater type values. A PARM_VALUE_DATA_TYPE_CODE and correct corresponding Parameter value must be sent to this procedure.' ,16, 1)
		END 

		EXECUTE @PARM_ID = AM.UDF_UI_ARTIFACT_PARAMETER_NEXT_PARM_ID @ART_CTRL_MASTER_ID
	
		INSERT INTO AM.ARTIFACT_PARAMETER(ART_CTRL_MASTER_ID, PARM_ID, PARM_NME, PARM_VALUE_DATA_TYPE_CODE, PARM_CHAR_VALUE, PARM_INT_VALUE, PARM_DTE_VALUE, PARM_DESC, IS_ENABLED_IND, CREATED_DTE, CREATED_BY) 
					VALUES(@ART_CTRL_MASTER_ID, @PARM_ID, @PARM_NME, @PARM_VALUE_DATA_TYPE_CODE, @PARM_CHAR_VALUE, @PARM_INT_VALUE, @PARM_DTE_VALUE, @PARM_DESC, @IS_ENABLED_IND, @CREATED_DTE, @CREATED_BY)
		
		Set @RTN = 1
		RETURN @RTN --Positive Return

	END TRY
	BEGIN CATCH
		 DECLARE @ProcName AS NVARCHAR(128) = ISNULL(ERROR_PROCEDURE(), 'UNKNOWN');
		 DECLARE @ER_PLAT as VARCHAR(128) = 'MSSQL DB ENGINE'
		 DECLARE @ER_NBR AS INTEGER = ISNULL(ERROR_NUMBER(),0)
		 DECLARE @ER_LINE AS INTEGER = ISNULL(ERROR_LINE(),0)
		 DECLARE @ER_SEV AS INTEGER = ISNULL(ERROR_SEVERITY(),0)
		 DECLARE @ER_ST AS INTEGER = ISNULL(ERROR_STATE(),0)
		 DECLARE @ER_MSG AS NVARCHAR(4000) = ISNULL(ERROR_MESSAGE(), 'A MESSAGE WAS NOT PROVIDED');
		 DECLARE @ER_USR AS VARCHAR(255) = ISNULL(CURRENT_USER, 'UNKONWN')

		 EXECUTE @RTN =  AM.USP_ERR_LOG @ProcName, @ER_PLAT, @ER_NBR, @ER_LINE, @ER_SEV, @ER_ST,@ER_MSG, @ER_USR	
		 RETURN @RTN --Returns LOG_ID From [AM].[PROCEDURE_ERROR_LOG]  as a negitive integer
	END CATCH;




