CREATE PROCEDURE [AM].[USP_UI_CHANGE_ARTIFACT_PARAMETER]
	@ART_CTRL_MASTER_ID INTEGER,				--<=Requried
	@PARM_ID CHAR(4),							--<=Requried
	@PARM_NME VARCHAR(30) = NULL ,				--<=Optional
	@PARM_VALUE_DATA_TYPE_CODE CHAR(1) = NULL,	--<=Optional
	@PARM_CHAR_VALUE VARCHAR(200) = NULL,		--<=Optional
	@PARM_INT_VALUE INTEGER = NULL,				--<=Optional
	@PARM_DTE_VALUE DATETIME = NULL,			--<=Optional
	@PARM_DESC VARCHAR(200) = NULL,				--<=Optional
	@RTN INT = Null OUTPUT						--<=Optional - No need to send defaults to 0 and then returns message based on success
AS
	
	SET NOCOUNT ON
	
	BEGIN TRY
		DECLARE @LAST_UPDT_DTE DATETIME = GETDATE()
		DECLARE @LAST_UPDT_BY VARCHAR(50) = SYSTEM_USER
		DECLARE @SQL_STR NVARCHAR(4000)
		DECLARE @PARMDEF NVARCHAR(1000)
		DECLARE @x INTEGER
			
		SET @X = (SELECT COUNT(PARM_ID) FROM AM.ARTIFACT_PARAMETER WHERE ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID 	AND PARM_ID = @PARM_ID)	
		IF @X <> 1
			BEGIN 
				RAISERROR ('No matching records found with this ART_CTRL_MASTER_ID and PARM_ID' ,16, 1)
			END		
		SET @x = 0
		SET @SQL_STR = N'UPDATE AM.ARTIFACT_PARAMETER SET '
		IF @PARM_NME IS NOT NULL 
			BEGIN
				SET @SQL_STR = @SQL_STR + N'PARM_NME = @PARM_NME, ' 
				SET @X = @X + 1  
			END 

		IF @PARM_VALUE_DATA_TYPE_CODE IS NOT NULL 
			BEGIN 
				SET @SQL_STR = @SQL_STR + N'PARM_VALUE_DATA_TYPE_CODE = @PARM_VALUE_DATA_TYPE_CODE, ' 
				SET @X = @X + 1 
			END

		-- ALWAYS SET TO PASSED VALUE OR NULL 
			BEGIN 
				SET @SQL_STR = @SQL_STR + N'PARM_CHAR_VALUE = @PARM_CHAR_VALUE, ' 
				SET @X = @X + 1 
			END

		-- ALWAYS SET TO PASSED VALUE OR NULL 
			BEGIN 
				SET @SQL_STR = @SQL_STR + N'PARM_INT_VALUE = @PARM_INT_VALUE, ' 
				SET @X = @X + 1 
			END

		-- ALWAYS SET TO PASSED VALUE OR NULL 
			BEGIN 
				SET @SQL_STR = @SQL_STR + N'PARM_DTE_VALUE = @PARM_DTE_VALUE, ' 
				SET @X = @X + 1 
			END

		IF @PARM_DESC IS NOT NULL 
			BEGIN 
				SET @SQL_STR = @SQL_STR + N'PARM_DESC = @PARM_DESC, ' 
				SET @X = @X + 1 
		    END

		If @X = 0
			BEGIN 
				--Raise Error
				RAISERROR ('You must update at least one field',16,1)
			END

		SET @SQL_STR = @SQL_STR + N'LAST_UPDT_DTE = @LAST_UPDT_DTE, '
		SET @SQL_STR = @SQL_STR + N'LAST_UPDT_BY = @LAST_UPDT_BY '
		SET @SQL_STR = @SQL_STR + N'WHERE ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID '
		SET @SQL_STR = @SQL_STR + N'AND PARM_ID = @PARM_ID'

		-- PARM_VALUE_DATA_TYPE_CODE  -- Logic for this field is as follows: 
		-- C = CHAR, I = INTEGER, D = Date 
		-- FORCES THE PARM_VALUE_DATA_TYPE_CODE AND THE CORESPONDING PARM VALUE TO MATCH - AFTER COALESCE IS CHECKED
		-- NULLS ALL VALUES THAT DON'T MATCH THE PARM_VALUE_DATA_TYPE_CODE
		IF UPPER(@PARM_VALUE_DATA_TYPE_CODE) = 'C' BEGIN SET @PARM_INT_VALUE  = NULL SET @PARM_DTE_VALUE = NULL END
		IF UPPER(@PARM_VALUE_DATA_TYPE_CODE) = 'I' BEGIN SET @PARM_CHAR_VALUE = NULL SET @PARM_DTE_VALUE = NULL END
		IF UPPER(@PARM_VALUE_DATA_TYPE_CODE) = 'D' BEGIN SET @PARM_CHAR_VALUE = NULL SET @PARM_INT_VALUE = NULL END
		
		--IF ALL ARE NULL RETURN AN ERROR
		IF COALESCE(@PARM_CHAR_VALUE, CAST(@PARM_INT_VALUE AS VARCHAR(200)), CAST(@PARM_DTE_VALUE AS VARCHAR(200))) IS NULL  -- @PARM_CHAR_VALUE = NULL AND @PARM_INT_VALUE = NULL AND @PARM_DTE_VALUE= NULL
			BEGIN 
				RAISERROR ('Either your code value does not match your parmater type value, or you passed NULL to all three parmater type values. A PARM_VALUE_DATA_TYPE_CODE and correct corresponding Parameter value must be sent to this procedure.' ,16, 1)
			END 

		SET @PARMDEF = N'@PARM_NME VARCHAR(30), @PARM_VALUE_DATA_TYPE_CODE CHAR(1), @PARM_CHAR_VALUE VARCHAR(200), 
						@PARM_INT_VALUE INTEGER, @PARM_DTE_VALUE DATETIME, @PARM_DESC VARCHAR(200), @LAST_UPDT_DTE DATETIME, 
						@LAST_UPDT_BY VARCHAR(50), @ART_CTRL_MASTER_ID INTEGER, @PARM_ID CHAR(4)'


		--Execute  sp_executesql @SQL_STR, @PARMDEF, @PARMVAL
		Execute  sp_executesql @SQL_STR, @PARMDEF, 
				@PARM_NME = @PARM_NME,
				@PARM_VALUE_DATA_TYPE_CODE = @PARM_VALUE_DATA_TYPE_CODE,
				@PARM_CHAR_VALUE = @PARM_CHAR_VALUE,
				@PARM_INT_VALUE = @PARM_INT_VALUE,
				@PARM_DTE_VALUE = @PARM_DTE_VALUE,
				@PARM_DESC = @PARM_DESC,
				@LAST_UPDT_DTE = @LAST_UPDT_DTE,
				@LAST_UPDT_BY = @LAST_UPDT_BY,
				@ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID,
				@PARM_ID = @PARM_ID
		
		Set @RTN = 1
		RETURN @RTN --Positive Return
	END TRY
	
	BEGIN CATCH
		 DECLARE @ProcName AS NVARCHAR(128) = ISNULL(ERROR_PROCEDURE(), 'UNKNOWN');
		 DECLARE @ER_PLAT as VARCHAR(128) = 'MSSQL DB ENGINE'
		 DECLARE @ER_NBR AS INTEGER = ISNULL(ERROR_NUMBER(),0)
		 DECLARE @ER_LINE AS INTEGER = ISNULL(ERROR_LINE(),0)
		 DECLARE @ER_SEV AS INTEGER = ISNULL(ERROR_SEVERITY(),0)
		 DECLARE @ER_ST AS INTEGER = ISNULL(ERROR_STATE(),0)
		 DECLARE @ER_MSG AS NVARCHAR(4000) = ISNULL(ERROR_MESSAGE(), 'A MESSAGE WAS NOT PROVIDED');
		 DECLARE @ER_USR AS VARCHAR(255) = ISNULL(CURRENT_USER, 'UNKONWN')

		 EXECUTE @RTN =  AM.USP_ERR_LOG @ProcName, @ER_PLAT, @ER_NBR, @ER_LINE, @ER_SEV, @ER_ST,@ER_MSG, @ER_USR	
		 RETURN @RTN --Returns LOG_ID From [AM].[PROCEDURE_ERROR_LOG]  as a negitive integer
	END CATCH;





