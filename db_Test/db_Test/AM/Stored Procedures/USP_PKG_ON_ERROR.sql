
CREATE Procedure [AM].[USP_PKG_ON_ERROR] 
	@ART_CTRL_MASTER_ID Int, 
	@EXEC_ID as Int,
	@START_TIME datetime,
	@END_TIME datetime,
	@IS_INCREMENTAL bit,
	@RTN INT = Null OUTPUT

	AS

	BEGIN TRY
		-- Sets Variables as requried
		DECLARE @LOAD_ID INTEGER
		DECLARE @BATCH_DTE DATE
		DECLARE @ART_GROUP_VALUE_ID tinyint
		DECLARE @ART_NME varchar(100)
		DECLARE @ART_PROCESS_DESC varchar(1000)
		DECLARE @ART_BATCH_RETRY_COUNTER TinyInt
		DECLARE @ART_BATCH_RETRY_THRESHOLD TinyInt
		DECLARE @PKG_END_TIME DATETIME = GETDATE()
		DECLARE @PKG_START_TIME DATETIME
		DECLARE @NEXT_PROCESS_DATE_TIME DATETIME = NULL
		DECLARE @SCHEDULE_TYPE_VALUE_ID INT
		DECLARE @LOAD_MESSAGE VARCHAR(100) = 'Package Execution Failure - EXEC MODE'
		
		SELECT @ART_NME = ART_NME, 	@ART_GROUP_VALUE_ID = ART_GROUP_VALUE_ID, @ART_PROCESS_DESC = ART_PROCESS_DESC, @PKG_START_TIME = LAST_PROCESS_DTE, @SCHEDULE_TYPE_VALUE_ID = SCHEDULE_TYPE_VALUE_ID,
			@ART_BATCH_RETRY_COUNTER = ART_BATCH_RETRY_COUNTER, @ART_BATCH_RETRY_THRESHOLD = ART_BATCH_RETRY_THRESHOLD,@LOAD_ID = LAST_LOAD_ID, @BATCH_DTE = LAST_BATCH_DTE
		FROM [AM].[ARTIFACT_CTRL_MASTER]
		WHERE ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID	
		
		EXEC @NEXT_PROCESS_DATE_TIME = AM.UDF_GET_RETRY_DELAY @SCHEDULE_TYPE_VALUE_ID 

		-- Upadates AM.ARTIFACT_CTRL_MASTER - Stauts - 1 ,  Next process is set out 5 min if not intraday batch. 
		UPDATE AM.ARTIFACT_CTRL_MASTER
			SET 
			LAST_EXEC_ID = @EXEC_ID,
			LAST_STATUS_CODE_VALUE_ID = -1,
			LAST_END_TIME = @PKG_END_TIME,
			LAST_START_TIME = @PKG_START_TIME,
			LAST_MESSAGE = @LOAD_MESSAGE,
			NEXT_PROCESS_DATE_TIME =  @NEXT_PROCESS_DATE_TIME,
			IS_STATUS_VALIDATED = 0,
			LOAD_START_VALUE = @START_TIME,
			LOAD_END_VALUE	 = @END_TIME,
			IS_INCREMENTAL_LOAD = @IS_INCREMENTAL
		WHERE ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID
	
	-- Creates a detial record.  
	-- NOTE: This doesn't happen in the QM process only within this process will a detial record get created.  
	-- Which means if there is a pre-execute event fire issue this will not get created. 
	-- The pre-execute event won't fire in isolated situations like connection issues (Rarely Happens)
	INSERT INTO  AM.ARTIFACT_CTRL_DETAIL
		(
		ART_CTRL_MASTER_ID, ART_NME, EXEC_ID, LOAD_ID, STATUS_CODE_VALUE_ID, ART_GROUP_VALUE_ID, LOAD_MESSAGE,
		ART_PROCESS_DESC, BATCH_DTE, ART_BATCH_RETRY_COUNTER, ART_BATCH_RETRY_THRESHOLD, START_TIME, END_TIME
		,USER_OSUSER ,CREATED_DTE, IS_INCREMENTAL_LOAD, LOAD_START_VALUE,LOAD_END_VALUE
		)
 
	 Values
		(
		@ART_CTRL_MASTER_ID, @ART_NME, @EXEC_ID, @LOAD_ID, -1, @ART_GROUP_VALUE_ID, @LOAD_MESSAGE, 
		@ART_PROCESS_DESC, @BATCH_DTE, @ART_BATCH_RETRY_COUNTER, @ART_BATCH_RETRY_THRESHOLD, @Start_Time, @END_Time
		, SYSTEM_USER, GETDATE(), @IS_INCREMENTAL, @START_TIME, @END_TIME		
		)
		
		-- Check For Missing SSISDB Mappings
		EXEC [AM].[USP_QM_UPDATE_STATUS_SSISDB_MAPPING]
		
		-- Invoke the Alerts Process 
		EXEC @RTN = AM.USP_ALERTS_MANAGER

		-- Return a positive result
		Select @RTN = 1
		RETURN @RTN

	END TRY

	BEGIN CATCH
		Begin
			 DECLARE @ProcName AS NVARCHAR(128) = ISNULL(ERROR_PROCEDURE(), 'UNKNOWN');
			 DECLARE @ER_PLAT as VARCHAR(128) = 'MSSQL DB ENGINE'
			 DECLARE @ER_NBR AS INTEGER = ISNULL(ERROR_NUMBER(),0)
			 DECLARE @ER_LINE AS INTEGER = ISNULL(ERROR_LINE(),0)
			 DECLARE @ER_SEV AS INTEGER = ISNULL(ERROR_SEVERITY(),0)
			 DECLARE @ER_ST AS INTEGER = ISNULL(ERROR_STATE(),0)
			 DECLARE @ER_MSG AS NVARCHAR(4000) = ISNULL(ERROR_MESSAGE(), 'A MESSAGE WAS NOT PROVIDED');
			 DECLARE @ER_USR AS VARCHAR(255) = ISNULL(CURRENT_USER, 'UNKONWN')

			 EXECUTE @RTN =  AM.USP_ERR_LOG @ProcName, @ER_PLAT, @ER_NBR, @ER_LINE, @ER_SEV, @ER_ST,@ER_MSG, @ER_USR	
		END
	    --RETURN @RTN --Returns LOG_ID From [AM].[PROCEDURE_ERROR_LOG]  as a negitive integer
		RETURN @RTN

	END CATCH;
