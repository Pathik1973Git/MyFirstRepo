
	CREATE Procedure [AM].[USP_QM_COMPLETE_AUDIT_MODE] 
	@ART_CTRL_MASTER_ID Int,		-- REQUIRED - From ACM 
	@RTN INT = Null OUTPUT			-- OPTIONAL - Do not send this is for a return

	AS
	
	SET NOCOUNT ON
	
	BEGIN TRY
		DECLARE @LOAD_ID INTEGER
		DECLARE @EXEC_ID INTEGER = -1
		DECLARE @SCHEDULE_TYPE_VALUE_ID INTEGER
		DECLARE @BATCH_DTE DATE
		DECLARE @ART_GROUP_VALUE_ID tinyint
		DECLARE @ART_NME varchar(100)
		DECLARE @ART_PROCESS_DESC varchar(1000)
		DECLARE @ART_BATCH_RETRY_COUNTER TinyInt
		DECLARE @ART_BATCH_RETRY_THRESHOLD TinyInt
		DECLARE @START_TIME DATETIME
		DECLARE @END_TIME DATETIME = GETDATE()
		DECLARE @LOAD_MESSAGE VarChar (200) = 'Package Execution Completed - AUDIT MODE'

		-- Set variables from ACM 
		SELECT @ART_NME = ART_NME, 	@ART_GROUP_VALUE_ID = ART_GROUP_VALUE_ID, @ART_PROCESS_DESC = ART_PROCESS_DESC, @START_TIME = LAST_PROCESS_DTE, @SCHEDULE_TYPE_VALUE_ID = SCHEDULE_TYPE_VALUE_ID,
			@ART_BATCH_RETRY_COUNTER = ART_BATCH_RETRY_COUNTER, @ART_BATCH_RETRY_THRESHOLD = ART_BATCH_RETRY_THRESHOLD, @LOAD_ID = LAST_LOAD_ID, @BATCH_DTE = LAST_BATCH_DTE
		FROM [AM].[ARTIFACT_CTRL_MASTER]
		WHERE ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID	

		-- UPDATE ACM 
		UPDATE AM.ARTIFACT_CTRL_MASTER
			SET 
			LAST_EXEC_ID = @EXEC_ID,
			LAST_STATUS_CODE_VALUE_ID = 2, 
			LAST_END_TIME = @END_TIME, 
			LAST_MESSAGE = @LOAD_MESSAGE,
			IS_STATUS_VALIDATED = 1
			WHERE ART_CTRL_MASTER_ID = @ART_CTRL_MASTER_ID

		-- UPDATE ARTIFACT_CTRL_DETAIL
		INSERT INTO  AM.ARTIFACT_CTRL_DETAIL
			(
			ART_CTRL_MASTER_ID, ART_NME, EXEC_ID, LOAD_ID, STATUS_CODE_VALUE_ID, ART_GROUP_VALUE_ID, 
			ART_PROCESS_DESC, BATCH_DTE, ART_BATCH_RETRY_COUNTER, ART_BATCH_RETRY_THRESHOLD, START_TIME, END_TIME,
			LOAD_MESSAGE,USER_OSUSER ,CREATED_DTE
			)
 
		 Values
			(
			@ART_CTRL_MASTER_ID, @ART_NME, @EXEC_ID, @LOAD_ID, 2, @ART_GROUP_VALUE_ID, 
			@ART_PROCESS_DESC, @BATCH_DTE, @ART_BATCH_RETRY_COUNTER, @ART_BATCH_RETRY_THRESHOLD, @Start_Time, @END_TIME,
			@LOAD_MESSAGE, SYSTEM_USER, GETDATE()			
			)

		Select @RTN = 1
		RETURN @RTN

	END TRY

	BEGIN CATCH
		Begin
			 DECLARE @ProcName AS NVARCHAR(128) = ISNULL(ERROR_PROCEDURE(), 'UNKNOWN');
			 DECLARE @ER_PLAT as VARCHAR(128) = 'MSSQL DB ENGINE'
			 DECLARE @ER_NBR AS INTEGER = ISNULL(ERROR_NUMBER(),0)
			 DECLARE @ER_LINE AS INTEGER = ISNULL(ERROR_LINE(),0)
			 DECLARE @ER_SEV AS INTEGER = ISNULL(ERROR_SEVERITY(),0)
			 DECLARE @ER_ST AS INTEGER = ISNULL(ERROR_STATE(),0)
			 DECLARE @ER_MSG AS NVARCHAR(4000) = ISNULL(ERROR_MESSAGE(), 'A MESSAGE WAS NOT PROVIDED');
			 DECLARE @ER_USR AS VARCHAR(255) = ISNULL(CURRENT_USER, 'UNKONWN')

			 EXECUTE @RTN =  AM.USP_ERR_LOG @ProcName, @ER_PLAT, @ER_NBR, @ER_LINE, @ER_SEV, @ER_ST,@ER_MSG, @ER_USR	
		END
		
		--RETURN @RTN --Returns LOG_ID From [AM].[PROCEDURE_ERROR_LOG]  as a negitive integer
		RETURN @RTN

	END CATCH;



