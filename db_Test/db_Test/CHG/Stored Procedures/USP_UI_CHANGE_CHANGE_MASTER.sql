CREATE PROCEDURE [CHG].[USP_UI_CHANGE_CHANGE_MASTER] (
	@CHG_ID INTEGER,							--<=Required
	@CHG_CLOSE_DATE DATETIME  = NULL,			--<=Optional
	@CHG_OWNER vARCHAR(100) = NULL,				--<=Optional
	@CHG_DESCRIPTION VARCHAR(2000) = NULL,		--<=Optional
	@RTN AS INT = NULL OUTPUT
)	

AS
	
	SET NOCOUNT ON
	
	BEGIN TRY
		DECLARE @LAST_UPDT_DTE DATETIME = GETDATE()
		DECLARE @LAST_UPDT_BY VARCHAR(50) = SYSTEM_USER
		DECLARE @SQL_STR NVARCHAR(4000)
		DECLARE @PARMDEF NVARCHAR(1000)
		DECLARE @x INTEGER
			

		SET @X = (SELECT COUNT(CHG_ID) FROM CHG.CHANGE_MASTER WHERE CHG_ID = @CHG_ID)
		IF @X <> 1
			BEGIN 
				RAISERROR ('No matching records found with this CHG_ID' ,16, 1)
			END

		SET @x = 0
		SET @SQL_STR = N'UPDATE CHG.CHANGE_MASTER SET '

		IF @CHG_CLOSE_DATE IS NOT NULL 
			BEGIN 
				SET @SQL_STR = @SQL_STR + N'CHG_CLOSE_DATE = @CHG_CLOSE_DATE, ' 
				SET @X = @X + 1 
			END 

		IF @CHG_OWNER IS NOT NULL 
			BEGIN 
				SET @SQL_STR = @SQL_STR + N'CHG_OWNER = @CHG_OWNER, ' 
				SET @X = @X + 1 
			END 

		IF @CHG_DESCRIPTION IS NOT NULL 
			BEGIN 
				SET @SQL_STR = @SQL_STR + N'CHG_DESCRIPTION = @CHG_DESCRIPTION, ' 
				SET @X = @X + 1 
			END
		If @X = 0
			BEGIN 
				--Raise Error
				RAISERROR ('You must update at least one field',16,1)
			END

		SET @SQL_STR = @SQL_STR + N'LAST_UPDT_DTE = @LAST_UPDT_DTE, '
		SET @SQL_STR = @SQL_STR + N'LAST_UPDT_BY = @LAST_UPDT_BY '
		SET @SQL_STR = @SQL_STR + N'WHERE CHG_ID = @CHG_ID'
				
		SET @PARMDEF = N'@CHG_CLOSE_DATE DATETIME, @CHG_OWNER VARCHAR(100), @CHG_DESCRIPTION VARCHAR(2000), 
						 @LAST_UPDT_DTE DATETIME, @LAST_UPDT_BY VARCHAR(50), @CHG_ID INTEGER'

		Execute  sp_executesql @SQL_STR, @PARMDEF, 
				@CHG_CLOSE_DATE = @CHG_CLOSE_DATE,
				@CHG_OWNER = @CHG_OWNER,
				@CHG_DESCRIPTION = @CHG_DESCRIPTION,
				@LAST_UPDT_DTE = @LAST_UPDT_DTE,
				@LAST_UPDT_BY = @LAST_UPDT_BY,
				@CHG_ID = @CHG_ID

		SET @RTN = 1
		RETURN @RTN --Positive Return
	END TRY
	
	BEGIN CATCH
		 DECLARE @ProcName AS NVARCHAR(128) = ISNULL(ERROR_PROCEDURE(), 'UNKNOWN');
		 DECLARE @ER_PLAT as VARCHAR(128) = 'MSSQL DB ENGINE'
		 DECLARE @ER_NBR AS INTEGER = ISNULL(ERROR_NUMBER(),0)
		 DECLARE @ER_LINE AS INTEGER = ISNULL(ERROR_LINE(),0)
		 DECLARE @ER_SEV AS INTEGER = ISNULL(ERROR_SEVERITY(),0)
		 DECLARE @ER_ST AS INTEGER = ISNULL(ERROR_STATE(),0)
		 DECLARE @ER_MSG AS NVARCHAR(4000) = ISNULL(ERROR_MESSAGE(), 'A MESSAGE WAS NOT PROVIDED');
		 DECLARE @ER_USR AS VARCHAR(255) = ISNULL(CURRENT_USER, 'UNKONWN')

		 EXECUTE @RTN =  AM.USP_ERR_LOG @ProcName, @ER_PLAT, @ER_NBR, @ER_LINE, @ER_SEV, @ER_ST,@ER_MSG, @ER_USR	
		 RETURN @RTN --Returns LOG_ID From [AM].[PROCEDURE_ERROR_LOG]  as a negitive integer
		 Rollback
	END CATCH;





